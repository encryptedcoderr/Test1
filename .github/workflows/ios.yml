name: iOS Simulator Boot Test

on:
  workflow_dispatch:

jobs:
  boot-simulator:
    runs-on: macos-latest
    name: Boot iPhone 16 Pro Simulator
    
    steps:
      - name: 1. Checkout Repository
        uses: actions/checkout@v4

      - name: 2. Install Coreutils (for timeout)
        run: |
          echo "--- Installing coreutils for timeout command ---"
          brew install coreutils || true
          echo "/usr/local/opt/coreutils/libexec/gnubin" >> $GITHUB_PATH
          # Alternative: Use native macOS timeout
          which timeout

      - name: 3. Boot iPhone 16 Pro Simulator
        id: boot_simulator
        run: |
          set -euo pipefail
          
          echo "--- Step 1: Cleaning old simulators ---"
          xcrun simctl delete all || true
          
          echo "--- Step 2: Finding latest iOS runtime ---"
          RUNTIME=$(xcrun simctl list runtimes | grep -E "iOS [0-9]+\.[0-9]+" | sort -V | tail -n 1 | awk '{print $NF}' || echo "com.apple.CoreSimulator.SimRuntime.iOS-18-0")
          echo "Using runtime: $RUNTIME"
          
          echo "--- Step 3: Creating fresh iPhone 16 Pro simulator ---"
          DEVICE_NAME="iPhone 16 Pro"
          UDID=$(xcrun simctl create "TestDevice" "$DEVICE_NAME" "$RUNTIME")
          echo "Created device UDID: $UDID"
          
          echo "--- Step 4: Booting simulator ---"
          xcrun simctl boot "$UDID"
          
          echo "--- Step 5: Waiting for boot completion ---"
          # Use native macOS timeout instead of gtimeout
          timeout 120s xcrun simctl bootstatus "$UDID" -b || true
          
          echo "--- Step 6: Verifying simulator status ---"
          xcrun simctl list devices | grep "$UDID" || true
          
          # Double-check boot status
          BOOT_STATUS=$(xcrun simctl bootstatus "$UDID")
          echo "Boot status: $BOOT_STATUS"
          
          if [[ "$BOOT_STATUS" == *"Booted"* ]]; then
            echo "✅ Simulator fully booted!"
          else
            echo "⚠️  Simulator boot status: $BOOT_STATUS"
            echo "   Continuing anyway..."
          fi
          
          echo "UDID=$UDID" >> $GITHUB_ENV
          echo "DEVICE_NAME=$DEVICE_NAME" >> $GITHUB_ENV
          echo "RUNTIME=$RUNTIME" >> $GITHUB_ENV

      - name: 4. Test Simulator Connectivity
        run: |
          echo "--- Testing simulator connectivity ---"
          
          # Wait a bit more for full initialization
          sleep 10
          
          echo "--- Basic command tests ---"
          xcrun simctl spawn "${{ env.UDID }}" whoami || echo "whoami failed"
          xcrun simctl spawn "${{ env.UDID }}" uname -a || echo "uname failed"  
          xcrun simctl spawn "${{ env.UDID }}" date || echo "date failed"
          
          echo "--- Filesystem test ---"
          xcrun simctl spawn "${{ env.UDID }}" ls -la / || echo "ls failed"
          
          echo "--- Network test ---"
          xcrun simctl spawn "${{ env.UDID }}" ping -c 1 -t 5 8.8.8.8 || echo "ping failed"
          
          echo "--- Photos app test ---"
          xcrun simctl spawn "${{ env.UDID }}" ls /Applications | grep Photos || echo "Photos app not found"
          
          echo "✅ All connectivity tests completed!"

      - name: 5. Simulator Information Report
        run: |
          echo "--- Generating simulator information report ---"
          echo ""
          echo "# iOS Simulator Boot Report"
          echo "Generated: $(date)"
          echo ""
          echo "## Device Information"
          echo "- Device Name: ${{ env.DEVICE_NAME }}"
          echo "- UDID: ${{ env.UDID }}"
          echo "- Runtime: ${{ env.RUNTIME }}"
          echo ""
          echo "## Available Runtimes"
          xcrun simctl list runtimes | grep iOS || true
          echo ""
          echo "## Boot Status"
          xcrun simctl list devices | grep -A 2 "${{ env.UDID }}" || true
          echo ""
          echo "## System Information"
          xcrun simctl spawn "${{ env.UDID }}" sw_vers || true
          xcrun simctl spawn "${{ env.UDID }}" sysctl -n hw.machine || true
          xcrun simctl spawn "${{ env.UDID }}" getconf LONG_BIT || true
          echo ""
          echo "## Storage Information"
          xcrun simctl spawn "${{ env.UDID }}" df -h / || true
          echo ""
          echo "✅ Boot process completed successfully!"

      - name: 6. Test Photos App Launch
        run: |
          echo "--- Testing Photos app launch ---"
          APP_BUNDLE_ID="com.apple.mobileslideshow"
          
          echo "--- Launching Photos app ---"
          xcrun simctl launch "${{ env.UDID }}" "$APP_BUNDLE_ID" || echo "Photos launch failed"
          sleep 5
          
          echo "--- Checking if Photos is running ---"
          RUNNING_PIDS=$(xcrun simctl spawn "${{ env.UDID }}" pgrep -f "$APP_BUNDLE_ID" || true)
          if [ -n "$RUNNING_PIDS" ]; then
            echo "✅ Photos app is running (PIDs: $RUNNING_PIDS)"
          else
            echo "⚠️  Photos app not detected after launch"
          fi
          
          echo "--- Killing Photos app ---"
          xcrun simctl spawn "${{ env.UDID }}" killall "$APP_BUNDLE_ID" || true
          sleep 2

      - name: 7. Shutdown Simulator
        if: always()
        run: |
          echo "--- Shutting down simulator ---"
          if [ -n "${{ env.UDID }}" ]; then
            xcrun simctl shutdown "${{ env.UDID }}" || true
            sleep 5
            xcrun simctl erase "${{ env.UDID }}" || true
            echo "✅ Simulator $UDID cleaned up"
          fi
          echo "✅ Cleanup completed"
